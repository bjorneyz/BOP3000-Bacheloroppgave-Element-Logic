@using WebStoreElementLogic.Entities
@using WebStoreElementLogic.Data;
@using WebStoreElementLogic.Interfaces;
@inject IStockService StockService;
@inherits ProductComponentBase;

<Alert OnCancel="() =>OnCancelEvent.InvokeAsync()">
    <div role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <div class="row mt-3 mb-3">
                        <div class="col-8">
                            <h5>@Product.Name</h5>
                            <p>@Product.Descr</p>
                            <p>Quantity: @Product.Qty</p>
                        </div>
                        <div class="col-lg-4 col-md-4">
                            <img src="@Product.URL" class="img-fluid" alt="@Product.Name" aria-label="@Product.Name">
                        </div>
                    </div>
                    @if (amount > Product.Qty || amount < 1)
                    {
                        <p class="text-center fw-bold">Product selected not in stock</p>
                    }
                    <div class="d-flex justify-content-between mt-3">
                        @if (amount > Product.Qty || amount < 1)
                        {
                            <div class="d-flex justify-content-center w-100">
                                <button type="button" class="btn btn-neutral" title="Close" aria-label="Close" @onclick="() => OnCancelEvent.InvokeAsync()">Close</button>
                            </div>
                        }
                        else if (amount < Product.Qty || amount > 1)
                        {
                            <button type="button" class="btn btn-neutral" title="Close" aria-label="Close" @onclick="() => OnCancelEvent.InvokeAsync()">Close</button>
                            <button type="button" class="btn btn-custom" title="Empty stock for @Product.Name" aria-label="Empty" @onclick="EmptyStock">Empty Stock</button>
                        }
                    </div>
                    @if (quant)
                    {
                        <div class="alert alert-danger text-center mt-3" role="alert">
                            Could not add selected amount
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</Alert>

@if (ShowStockMessage)
{
    <div class="alert alert-success position-fixed top-0 start-50 translate-middle-x" role="alert" style="z-index: 9999; margin-top: 1%;">
        <strong>Empty stock done!</strong> @msg
    </div>
}

@code {
    [Parameter]
    public int Index { get; set; }

    [Parameter]
    public Product Product { get; set; }

    [Parameter]
    public EventCallback OnCancelEvent { get; set; }

    [Parameter]
    public EventCallback<int[]> OnAddEvent { get; set; }

    [Parameter]
    public EventCallback OnStockUpdated { get; set; }


    private int amount = 1;

    private bool quant = false;

    private bool ShowStockMessage { get; set; }
    private string msg;

    private async Task EmptyStock()
    {
        int Id = Product.Id + 1;
        await StockService.EmptyStockAsync(Id);
        ShowStockMessage = true;
        await Task.Delay(1000);
        ShowStockMessage = false;
        await RefreshProducts();
        await OnCancelEvent.InvokeAsync();
        await OnStockUpdated.InvokeAsync(); // Invoke the OnStockUpdated callback
    }

}