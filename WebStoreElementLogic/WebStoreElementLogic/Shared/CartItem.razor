@using Entities
<li class="list-group-item d-flex flex-column flex-xxl-row justify-content-between align-items-start" style="max-width: 16vw;">
    <span class="d-block d-xxl-inline">@Info.Name</span>
    <div style="display: flex; align-items: center;">
        <span class="badge bg-custom rounded-pill" style="margin-right: 10px;">@Count</span>
        <span role="button" class="badge bg-positive round-pill" @onclick="() => UpdateCount(1)" aria-label="Increase Quantity" style="margin-right: 10px;">+</span>
        <span role="button" class="badge bg-warning round-pill" @onclick="() => UpdateCount(-1)" aria-label="Decrease Quantity" style="margin-right: 10px;">-</span>
        <span role="button" class="badge bg-standard round-pill" @onclick="() => Remove()" aria-label="Remove" style="margin-right: 10px;">X</span>
        @*<button @onclick="Remove" class="btn-warning" style="margin-rignt: 10px;"></button>*@
    </div>
</li>
@code {
        [Parameter]
        public Product Info { get; set; }

        [Parameter]
        public int Count { get; set; } = 1;

        [Parameter]
        public int Index { get; set; }

        [Parameter]
        public EventCallback<int> OnRemove { get; set; }

        [Parameter]
        public EventCallback<int[]> OnCountUpdate { get; set; }

        public void Remove()
        {
            OnRemove.InvokeAsync(Index);
        }

        public void UpdateCount(int increment)
        {
            Count += increment;
            OnCountUpdate.InvokeAsync(new int[] { Index, Count });
}

}
