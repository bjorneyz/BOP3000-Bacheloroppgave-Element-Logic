@page "/productform/{id:int}"
@using WebStoreElementLogic.Data;
@using WebStoreElementLogic.Entities;
@using WebStoreElementLogic.Interfaces;
@inject IProductService ProductService;
@inject ICustomWebHostEnvironment CustomWebHostEnvironment;
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager

<form class="d-flex flex-row flex-lg-column p-lg-3 justify-content-center px-0 px-md-2 px-lg-5">
    <div class="d-flex flex-column justify-content-center">
        <h3 class="text-center">@Title</h3>
        <img src="@Copy.URL" style="width: 25vmin; height: 25vmin;" class="align-self-center" alt="@Copy.Name" aria-label="@Copy.Name"/>
    </div>

    <div class="d-flex flex-column justify-content-center">
        <label class="form-label" for="name">Name</label>
        <input class="form-control" type="text" autocomplete="off" title="Product Name" name="name" aria-label="Product name" @bind="Copy.Name">

        <label class="form-label" for="id">Id</label>
        <input class="form-control" type="text" autocomplete="off" title="Product ID" readonly name="id" aria-label="Product id" @bind="Copy.Id">

        <label class="form-label" for="description">Description</label>
        <textarea class="form-control" name="descr" title="Add a description/ Size for product" aria-label="Description of product" @bind="Copy.Descr" ></textarea>

        <div class="mb-3">
            <label class="form-label" for="url">Image URL</label>
            <div class="d-flex justify-content-between">
                <input class="form-control" name="url" title="URL for the image" aria-label="Image URL/Image path" @bind="Copy.URL" />
                <!-- Create a custom button to override the InputFile -->
                <label class="custom-input-file d-flex justify-content-end" title="Choose a file to upload">
                    <div class="button-wrapper" aria-label="Choose image file">
                        Choose a file
                    </div>
                    <!-- File input -->
                    <InputFile id="imageFile" OnChange="@(async (e) => await HandleFileSelected(e))" />
                </label>
            </div>
        </div>

        @*<input class="form-control" type="text" autocomplete="off" name="url" @bind="Copy.URL">*@

        <div class="d-flex mt-1 justify-content-between">
            <div>
                <button type="button" @onclick="Save" class="btn btn-positive me-2" title="Save changes" aria-label="Save changes">@SaveLabel</button>
                <button type="button" @onclick="Discard" class="btn btn-neutral" title="Cancel changes" aria-label="Cancel changes">@DiscardLabel</button>
            </div>
            @if (DeleteButton)
            {
                <button type="button" @onclick="Delete" class="btn btn-warning align-self-lg-start align-self-stretch" title="Delete" aria-label="Delete product">Delete</button>
            }
        </div>
    </div>
    
</form>

@code {
    [Parameter]
    public int id { get; set; }

    [Parameter]
    public string DiscardLabel { get; set; } = "";

    [Parameter]
    public string SaveLabel { get; set; } = "";

    [Parameter]
    public bool DeleteButton { get; set; } = false;

    [Parameter]
    public string Title { get; set; } = "";

    [Parameter]
    public Product Info { get; set; }

    [Parameter]
    public Product Copy { get; set; }

    [Parameter]
    public EventCallback<Product> OnSave { get; set; }

    [Parameter]
    public EventCallback OnDiscard { get; set; }

    [Parameter]
    public EventCallback OnDelete { get; set; }

    // image
    [Parameter]
    public EventCallback OnImageSelected { get; set; }

    // product- object
    private Product product;

    // Image
    private IBrowserFile selectedFile;

    // image
    private string _imagePath;

    protected async Task OninitializeAsync()
    {
        product = await ProductService.GetByID(id);

    }

    private void Discard()
    {
        Product.Change(Copy, Info);
        OnDiscard.InvokeAsync();
        StateHasChanged();
    }

    // Editing product
    private async Task Save()
    {
        await ProductService.Update(Copy);
        Product.Change(Info, Copy);
        StateHasChanged();
        OnSave.InvokeAsync(Info);
        NavigationManager.NavigateTo("/productpage");
    }

    private void Delete()
    {
        OnDelete.InvokeAsync();
    }

    // Maximum 30MB (imagesize)
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var fileName = Path.GetFileNameWithoutExtension(e.File.Name);
        var extension = Path.GetExtension(e.File.Name);
        var newFileName = $"{fileName}_{DateTime.Now.Ticks}{extension}";

        var path = Path.Combine(CustomWebHostEnvironment.WebRootPath, "images", newFileName);

        await using var stream = new FileStream(path, FileMode.Create);
        await e.File.OpenReadStream().CopyToAsync(stream);

        // Create URL
        var baseUrl = NavigationManager.BaseUri;
        var imageUrl = $"{baseUrl}images/{newFileName}";

        // Remove address from the URL
        //var uri = new Uri(imageUrl);
        //var relativeUrl = uri.PathAndQuery;

        // Save the URL to database
        Copy.URL = imageUrl;
    }


}

