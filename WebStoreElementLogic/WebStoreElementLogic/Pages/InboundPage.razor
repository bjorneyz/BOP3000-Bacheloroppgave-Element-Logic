@page "/inboundpage"
@using Microsoft.AspNetCore.WebUtilities;
@using WebStoreElementLogic.Data;
@using WebStoreElementLogic.Entities;
@using WebStoreElementLogic.Interfaces;
@using Microsoft.AspNetCore.SignalR.Client;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.EntityFrameworkCore.Scaffolding.Metadata;
@using Microsoft.AspNetCore.SignalR;
@using WebStoreElementLogic.Hubs;
@using static WebStoreElementLogic.Controllers.EManagerController;
@inject IProductService ProductService;
@inject IEManagerService EManagerService;
@inject IInboundService InboundService;
@inject IJSRuntime JSRuntime;
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inherits ProductComponentBase

<title>Inbound</title>
<div class="container-fluid">
    <div class="row">
        <div class="@(inbounds != null ? "col-lg-9" : "col-lg-12")">
            <div class="d-flex flex-row mx-5 rounded mb-3">
                <button @onclick="() => ShowList = !ShowList" class="btn btn-custom">
                    @if (ShowList)
                    {
                        <i class="fa fa-th"></i>
                    }
                    else
                    {
                        <i class="fa fa-list"></i>
                    }
                </button>
                <input placeholder="Search Product Names.." id="txtSearch" name="search" type="text" class="form-control ms-3"
                       @bind="SearchTerm" @bind:event="oninput">
            </div>
            <div class="@(ShowList ? "mx-5" : "row")">
                @foreach (Product product in FilteredProducts)
                {
                    if (!ShowList)
                    {
                        <ProductTile Product="@product"
                             Index="@FilteredProducts.IndexOf(product)"
                             OnSelected="(index) => SelectProduct(FilteredProducts[index])"
                             Selected="@(SelectedIndex == FilteredProducts.IndexOf(product))" />
                    }
                    else
                    {
                        <ProductListItem Info="@product"
                                 Index="@FilteredProducts.IndexOf(product)"
                                 OnSelected="(index) => SelectProduct(FilteredProducts[index])"
                                 Selected="@(SelectedIndex == FilteredProducts.IndexOf(product))" />
                    }
                }
                @if (Products == null)
                {
                    <h3>Loading Products...</h3>
                }
            </div>
        </div>
        @if (inbounds != null)
        {
            <div class="col-lg-3">
                <div class="container-fluid">
                    <h4>Unfinished Inbounds</h4>
                    @foreach (Inbound inbound in inbounds)
                    {
                        <p>ProductID:@inbound.ProductId ProductName x @inbound.Quantity</p>
                    }
                </div>
            </div>
        }
    </div>
</div>


@if (ShowModal)
{
    <ProductModal 
        isInbound="true"
        Product="@FilteredProducts[SelectedIndex]"
        Index="SelectedIndex"
        OnCancelEvent="() => ShowModal = false"
        OnAddEvent="Checkout" />
}

@if (ShowSuccess)
{
    <Alert OnCancel="() => ShowSuccess = false">
        <h3>Products placed</h3>
        <p>
            You have successfully placed
            <br>
            <span class="text-info text-decoration-underline">
                @FilteredProducts[SelectedIndex].Name
            </span>
            x @Count
            <br>
            Into the system
        </p>
        <div class="d-flex flex-row justify-content-center" style="min-width: 25vw;">
            <button @onclick="() => ShowSuccess = false" class="btn btn-custom">Ok</button>
        </div>
    </Alert>
}

@code {

    public override void SelectProduct(Product product)
    {
        base.SelectProduct(product);
        ShowModal = true;
    }

    private bool ShowModal = false;
    private bool ShowList = false;
    private bool ShowSuccess = false;

    private int Count = 0;

    private HubConnection _hubConnection;

    private List<Inbound> inbounds;

    protected override async Task OnInitializedAsync()
    {

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/EManagerHub"))
            .Build();

        _hubConnection.On<PGBody[]>("PlacedGoods", async (PGBody[] data) =>
        {
            // Update processed inbound orders (UI only!)
            string msg = data[0].ToString();
            await JSRuntime.InvokeVoidAsync("alert", $"Got some data from eManager:\n{msg}");
            await RefreshInboundList();
            StateHasChanged();
        });

        // method for showing productname from database into page
        try
        {
            int pageSize = 25;
            // Get the current page number from the query string
            int pageIndex = GetPageIndexFromQueryString();

            // Store in a new list temporarily to avoid seting Products to null
            List<Product> FetchedProducts = await ProductService.GetProducts("", pageIndex, pageSize);
            FilteredProducts = FetchedProducts;
            Products = FilteredProducts.ToList();

            await RefreshInboundList();

        }
        catch (Exception e)
        {
            // NoConnection = true;
        }

        StateHasChanged();
        // Wait for signalR update form endpoint
        await _hubConnection.StartAsync();
    }

    public async Task RefreshInboundList()
    {
        inbounds = await InboundService.GetUnfinishedInbounds();
    }

    // TODO: consider adding to default base class
    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    private async void Checkout(int[] product)
    {
        ShowModal = false;

        int index = product[0];
        int count = product[1];

        Console.WriteLine("Checkout: " + index + " " + count);

        // TODO: Send to eManager, remove next two lines
        Count = count;
        ShowSuccess = true;

        int nextPurchaseOrderId = await InboundService.GetNextID();
        await InboundService.Create(FilteredProducts[index], count);

        int transactionId = await InboundService.GetTransactionId(nextPurchaseOrderId);

        await EManagerService.GoodsReceival(FilteredProducts[index], Count, nextPurchaseOrderId, transactionId);
        await RefreshInboundList();
    }
}