@page "/users/edit/{id:int}"
@using LoginNamespace = Login;
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.WebUtilities;
@using WebStoreElementLogic.Data;
@using WebStoreElementLogic.Entities;
@using WebStoreElementLogic.Interfaces;
@using Microsoft.AspNetCore.Identity;
@inject IUserService UserService;
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager


<title>Register</title>
<div class="center">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6">

                <div class="card">
                    <div class="card-body">

                        <img src="../images/logos/Element Logic logo red hires.jpg" style="width: 300px; height: 100px;" class="mx-auto d-block mb-4" />

                        <h5 class="card-title text-center mb-4">Edit selected user</h5>

                        <EditForm Model="@EditUserModel" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group border mb-4">
                                <div class="input-group">
                                    <InputText id="username" class="form-control narrow-input" autocomplete="off" placeholder="Username" @bind-Value="@EditUserModel.userName" />
                                    <div class="input-group-append">
                                        <span class="input-group-text" style="background-color: transparent; border: none;">
                                            <!-- Font Awesome icon -->
                                            <i class="fa fa-user fa-2x" style="border: none;"></i>
                                        </span>
                                    </div>
                                </div>
                                <ValidationMessage For="@(() => EditUserModel.userName)" />
                            </div>
                            <div class="form-group border mb-4">
                                <div class="input-group">
                                    <InputText id="password" class="form-control narrow-input" type="password" placeholder="New Password" @bind-Value="@EditUserModel.password" />
                                    <div class="input-group-append">
                                        <span class="input-group-text" style="background-color: transparent; border: none;">
                                            <!-- Font Awesome icon -->
                                            <i class="fa fa-lock fa-2x" style="border: none;"></i>
                                        </span>
                                    </div>
                                </div>
                                <ValidationMessage For="@(() => EditUserModel.password)" />
                            </div>

                            <div class="d-flex justify-content-end">
                                <NavLink href="/userpage" class="btn btn-link">Back to user management</NavLink>
                                <button type="submit" class="btn btn-login btn-block">Confirm changes</button>
                            </div>

                        </EditForm>


                    </div>
                </div>

            </div>
        </div>
    </div>
</div>
<style>
    .card {
        max-width: 400px;
        margin: 0 auto;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .narrow-input {
        width: 50px;
    }
</style>


@code {
    @code {
        [Parameter]
        public int id { get; set; }

        private EditUserModel EditUserModel { get; set; } = new EditUserModel();

        protected override async Task OnInitializedAsync()
        {
            Console.WriteLine(id);
            var user = await UserService.GetUserById(id);
            if (user != null)
            {
                EditUserModel.userId = user.userId;
                EditUserModel.userName = user.userName;
                EditUserModel.password = ""; // Do not show the hashed password
            }
        }

        private async Task HandleValidSubmit()
        {
            var passwordHasher = new PasswordHasher<User>();
            var userToUpdate = await UserService.GetUserById(EditUserModel.userId);

            EditUserModel updatedEditUserModel = new EditUserModel
            {
                userId = userToUpdate.userId,
                userName = !string.IsNullOrEmpty(EditUserModel.userName) ? EditUserModel.userName : userToUpdate.userName,
            };

            if (!string.IsNullOrEmpty(EditUserModel.password)) // Update the password only if it's not empty
            {
                var hashedPassword = passwordHasher.HashPassword(userToUpdate, EditUserModel.password);
                updatedEditUserModel.password = hashedPassword;
            }
            else
            {
                updatedEditUserModel.password = userToUpdate.password;
            }

            await UserService.UpdateUserAsync(updatedEditUserModel); // Call the UpdateUserAsync method with EditUserModel

            NavigationManager.NavigateTo("/userpage");
        }


    }

}
