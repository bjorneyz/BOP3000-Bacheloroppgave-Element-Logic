@page "/userpage"
@attribute [Authorize(Roles = "Admin")]
@using WebStoreElementLogic.Entities
@using WebStoreElementLogic.Interfaces
@using Microsoft.AspNetCore.Components.Web
@inject IUserService UserService
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.WebUtilities;
@using WebStoreElementLogic.Data;
@using Microsoft.AspNetCore.Identity;
@using System.Data;
@inject IJSRuntime JSRuntime;
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject IProductService ProductService;
@inject IProductService ProductService;
@inject IDapperService _dapperService;


<style>
    .content {
        margin-left: 50px;
        margin-right: 50px;
    }
</style>
<div class="row">
    <div class="col-md-8">
        <h3 style="text-align:center">Users in the system</h3>

        <!-- User table -->
        <table class="table table-striped">
            <thead>
                <tr>
                    <th style="width: 80%">Username</th>
                    <th style="width: 20%"></th>
                </tr>
            </thead>
            <tbody>
                @if (users != null)
                {
                    foreach (var user in users)
                    {
                        <tr>
                            <td>@user.userName</td>
                            <td style="white-space: nowrap">
                                <button @onclick="@(() => EditUser(user.userId))" class="btn btn-sm btn-neutral mr-1" title="Edit user" aria-label="Edit user">Edit</button>
                                <button @onclick="@(() => DeleteUser(user.userId))" class="btn btn-sm btn btn-login btn-block" title="Delete user" aria-label="Delete user">
                                    @if (user.IsDeleting)
                                    {
                                        <span class="spinner-border spinner-border-sm"></span>
                                    }
                                    else
                                    {
                                        <span>Delete</span>
                                    }
                                </button>
                            </td>
                        </tr>
                    }
                }
                @if (loading)
                {
                    <tr>
                        <td colspan="2" class="text-center">
                            <span class="spinner-border spinner-border-lg align-center"></span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    </div>
    <div class="col-md-4">
        <h3 style="text-align:center">@(isEditing ? "Edit user" : "Create new user")</h3>
        <!-- Add user form -->
        <EditForm Model="@(isEditing ? (object)editUser : newUser)" OnValidSubmit="() => HandleValidSubmit()" OnInvalidSubmit="@HandleInvalidSubmit" aria-label="Edit user form">
            <DataAnnotationsValidator />

            <div class="form-group border mb-4" style="margin-top: 48px;">
                <div class="input-container">
                    @if (isEditing)
                    {
                        <InputText id="username" class="form-control narrow-input" autocomplete="off" placeholder="Username" aria-label="Username" @bind-Value="editUser.userName" />
                    }
                    else
                    {
                        <InputText id="username" class="form-control narrow-input" autocomplete="off" placeholder="Username" aria-label="Username" @bind-Value="newUser.userName" />
                    }
                    
                    <!-- Font Awesome icon -->
                    <i class="fa fa-user input-icon" aria-label="User icon"></i>
                    
                </div>
                <ValidationMessage For="@(() => editUser.userName)" />
                <ValidationMessage For="@(() => newUser.userName)" />
            </div>
            <div class="form-group border mb-4">
                <div class="input-container">
                    @if (isEditing)
                    {
                        <InputText id="password" class="form-control narrow-input" type="password" placeholder="Password" aria-label="Password" @bind-Value="@newPassword" />
                    }
                    else
                    {
                        <InputText id="password" class="form-control narrow-input" type="password" placeholder="Password" aria-label="Password" @bind-Value="@newUser.password" />
                    }
                    
                    <!-- Font Awesome icon -->
                    <i class="fa fa-lock input-icon" aria-label="Lock icon"></i>
                     
                </div>
                <ValidationMessage For="@(() => newPassword)" />
                <ValidationMessage For="@(() => newUser.password)" />
            </div>

            <div class="form-group form-check d-flex justify-content-between align-items-center">
                <div>
                    @if (isEditing)
                    {
                        <InputCheckbox id="isAdmin" class="form-check-input" aria-label="Admin rights" @bind-Value="@editUser.admin" />
                    }
                    else
                    {
                        <InputCheckbox id="isAdmin" class="form-check-input" aria-label="Admin rights" @bind-Value="@newUser.admin" />
                    }
                    <label class="form-check-label" for="isAdmin">
                        Admin rights
                    </label>
                    <div class="tooltip-container">
                        <i class="fas fa-info-circle" aria-label="Info icon"></i>
                        <span class="tooltip-text">This checkbox gives the user admin rights, which means that he will be able to access the userpage which you are currently on. He will also have access to edit and delete users.</span>
                    </div>

                </div>
                <div>
                    @if (isEditing)
                    {
                        <button type="button" class="btn btn-secondary mr-2" title="Cancel edit" aria-label="Cancel" @onclick="CancelEdit">Cancel</button>
                    }
                    <button type="submit" class="btn btn-login mx-2" aria-label="Submit">@(!isEditing ? "Add user" : "Update user")</button>
                </div>
            </div>
        </EditForm>
    </div>
    <div class="col-md-4 offset-md-8 mt-4">
        <h3 style="text-align: center">Delete/flush all data</h3>
        <div class="text-center mt-2" >
            <button type="button" class="btn btn-custom" title="Delete data" aria-label="Delete data" @onclick="DeleteData">Delete data</button>
            <div class="tooltip-container" style="margin-top: 25px;">
                <i class="fas fa-info-circle" aria-label="Info icon"></i>
                <span class="tooltip-text">This button will delete all data for products, stock, inbound, and order. Once the data is deleted, it is not possible to get it back.</span>
            </div>
        </div>

    </div>
    @if (DisplayWarning)
    {
        <Alert OnCancel="() => DisplayWarning = false">
            <h3>Are you sure?</h3>
            <p>All data from products, stocks, inbounds, and orders will be deleted.</p>
            <div class="d-flex flex-row justify-content-around mt-3">
                <button class="btn btn-neutral" title="Cancel" aria-label="Cancel" @onclick="() => DisplayWarning = false">No</button>
                <button class="btn btn-danger" title="Confirm" aria-label="Confirm" @onclick="DeleteDataConfirm">Yes</button>
            </div>
        </Alert>
    }
</div>
@if (DisplayToast)
{
    <Toast Success>
        <strong>All the data got deleted!</strong>
    </Toast>
}
@if (DeleteUserWarning)
{
    <Alert OnCancel="() => DeleteUserWarning = false">
        <h3>Are you sure?</h3>
        <p class="text-danger">The user will be permanently deleted</p>
        <div class="d-flex flex-row justify-content-around mt-3">
            <button class="btn btn-neutral" title="Cancel" aria-label="Cancel" @onclick="() => DeleteUserWarning = false">No</button>
            <button class="btn btn-danger" title="Confirm" aria-label="Confirm" @onclick="DeleteUserConfirm">Yes</button>
        </div>
    </Alert>
}
@if (UpdateUserWarning)
{
    <Alert OnCancel="async () => await resetNewUser()">
        <h3>Are you sure?</h3>
        <p class="text-danger">The user will be permanently altered</p>
        <div class="d-flex flex-row justify-content-around mt-3">
            <button class="btn btn-neutral" title="Cancel" aria-label="Cancel" @onclick="async () => await resetNewUser()">No</button>
            <button class="btn btn-danger" title="Confirm" aria-label="Confirm" @onclick="async () => await HandleValidSubmit(true)">Yes</button>
        </div>
    </Alert>
}
@if (UserExistsWarning)
{
    <Toast>
        <strong>Could not create user:</strong>
        <br>A user with that name already exists
    </Toast>
}
@code {
    private List<User> users;
    private bool loading = true;
    private bool isEditing = false;
    private int editingUserId = 0;
    private String newPassword = "";

    private bool DisplayWarning = false;
    private bool DisplayToast = false;

    private bool DeleteUserWarning = false;
    private bool UpdateUserWarning = false;
    private bool UserExistsWarning = false;

    private int IdToDelete = -1;
    private int IdToUpdate = -1;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        loading = true;
        var allUsers = await UserService.GetAllUsersAsync();
        users = allUsers.Where(u => u.userId != 1).ToList(); // exclude admin user with userId1
        loading = false;
    }

    private void DeleteUser(int id)
    {
        IdToDelete = id;
        DeleteUserWarning = true;
    }

    private async void DeleteUserConfirm()
    {
        await UserService.DeleteUserAsync(IdToDelete);
        await LoadUsers();
        DeleteUserWarning = false;
        StateHasChanged();
    }

    // Edit user
    private async Task EditUser(int id)
    {
        var user = await UserService.GetUserById(id);
        editUser = new EditUserModel
            {
                userId = user.userId,
                userName = user.userName,
                password = user.password,
                admin = user.admin
            };
        isEditing = true;
        editingUserId = id;
    }


    private void CancelEdit()
    {
        isEditing = false;
        editingUserId = 0;
        newUser = new User();
    }

    private async Task DeleteDataConfirm()
    {
        DisplayWarning = false;
        DisplayToast = true;
        StateHasChanged();
        await Task.Delay(5000);
        DisplayToast = false;
        // Delete all data methods. First delete photos locally and then flushing the database after.
        ProductService.DeleteImages();

        // Call the stored procedure to flush the database
        await DeleteAllData();

        StateHasChanged();
    }

    private void DeleteData()
    {
        DisplayWarning = true;
    }

    public Task<int> DeleteAllData()
    {
        int result = 0;
        try
        {
            result = _dapperService.Execute(
                "[dbo].[spDeleteAll]",
                commandType: CommandType.StoredProcedure);
        }
        catch (Exception ex)
        {
            // Log the exception
            Console.WriteLine("Error deleting all data: " + ex.Message);
            // Re-throw the exception so the calling code can handle it
            throw;
        }

        return Task.FromResult(result);
    }



    [Parameter]
    public int userId { get; set; }

    [RegularExpression("^[a-zA-Z0-9]*$", ErrorMessage = "Username can only contain letters and numbers.")]
    public string userName { get; set; }

    [RequiredIfCreatingUser("IsEditing")]
    public string password { get; set; }

    public bool admin { get; set; }

    private User newUser = new User();
    private EditUserModel editUser = new EditUserModel();

    private async Task HandleValidSubmit(bool confirmed = false)
    {
        if (isEditing)
        {
            UpdateUserWarning = true;
            if (confirmed)
            {
                var userToUpdate = await UserService.GetUserById(editingUserId);
                userToUpdate.userName = editUser.userName;
                userToUpdate.admin = editUser.admin;

                if (!string.IsNullOrWhiteSpace(editUser.password)) // Only update the password if it's provided
                {
                    var passwordHasher = new PasswordHasher<User>();
                    var hashedPassword = passwordHasher.HashPassword(userToUpdate, newPassword);
                    userToUpdate.password = hashedPassword;
                }

                var updatedEditUserModel = new EditUserModel
                    {
                        userId = userToUpdate.userId,
                        userName = userToUpdate.userName,
                        password = userToUpdate.password,
                        admin = userToUpdate.admin
                    };

                await UserService.UpdateUserAsync(updatedEditUserModel);

                CancelEdit();
            }
            else
            {
                return;
            }
        }
        else
        {
            var existingUser = await UserService.GetUser(newUser.userName);
            if (existingUser != null)
            {
                UserExistsWarning = true;
                StateHasChanged();
                await Task.Delay(2500);
                UserExistsWarning = false;
                StateHasChanged();

                return;
            }

            var passwordHasher = new PasswordHasher<User>();
            var hashedPassword = passwordHasher.HashPassword(newUser, newUser.password);
            newUser.password = hashedPassword;

            await UserService.Create(newUser);
        }

        await resetNewUser();
    }

    private async Task resetNewUser()
    {
        await LoadUsers();
        newUser = new User();
        editUser = new EditUserModel();
        UpdateUserWarning = false;
    }




    public class RequiredIfCreatingUserAttribute : ValidationAttribute
    {
        public string IsEditingProperty { get; set; }

        public RequiredIfCreatingUserAttribute(string isEditingProperty)
        {
            IsEditingProperty = isEditingProperty;
            ErrorMessage = "The {0} field is required.";
        }

        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            var isEditingPropertyInfo = validationContext.ObjectType.GetProperty(IsEditingProperty);
            if (isEditingPropertyInfo == null)
            {
                return new ValidationResult($"Property '{IsEditingProperty}' is not found.");
            }

            var isEditingPropertyValue = isEditingPropertyInfo.GetValue(validationContext.ObjectInstance, null);
            if (!(isEditingPropertyValue is bool))
            {
                return new ValidationResult($"Property '{IsEditingProperty}' should be of type 'bool'.");
            }

            bool isEditing = (bool)isEditingPropertyValue;
            if (!isEditing && string.IsNullOrWhiteSpace(value?.ToString()))
            {
                return new ValidationResult(ErrorMessage);
            }

            return ValidationResult.Success;
        }
    }

    private void HandleInvalidSubmit()
    {
        // Show an error message or perform other actions when the form is invalid.
        Console.WriteLine("Form is invalid");
    }

}