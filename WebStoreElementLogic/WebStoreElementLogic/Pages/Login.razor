@page "/login"
@using LoginNamespace = Login;
@using System.Security.Claims;
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.WebUtilities;
@using WebStoreElementLogic.Data;
@using WebStoreElementLogic.Entities;
@using WebStoreElementLogic.Interfaces;
@using Microsoft.AspNetCore.Identity;
@inject IUserService UserService;
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager;
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Authentication.Cookies;
@using Microsoft.AspNetCore.Authentication;
@inject IJSRuntime JSRuntime;
@using Microsoft.AspNetCore.Components.Authorization;
@inject IHttpContextAccessor HttpContextAccessor
@layout Shared.LoginLayout;



<title>Log in</title>
<div class="center">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6">

                <div class="card">
                    <div class="card-body">

                        <img src="../images/logos/Element Logic logo red hires.jpg" style="width: 300px; height: 100px;" class="mx-auto d-block mb-4" />

                        <h5 class="card-title text-center mb-4">Login to Web Store</h5>

                        <EditForm Model="@loginModel" OnValidSubmit="@HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group border mb-4">
                                <div class="input-group">
                                    <InputText id="username" class="form-control narrow-input" autocomplete="off" placeholder="Username" @bind-Value="@loginModel.Username" />
                                    <div class="input-group-append">
                                        <span class="input-group-text" style="background-color: transparent; border: none;">
                                            <!-- Font Awesome icon -->
                                            <i class="fa fa-user fa-2x" style="border: none;"></i>
                                        </span>
                                    </div>
                                </div>
                                <ValidationMessage For="@(() => loginModel.Username)" />
                            </div>
                            <div class="form-group border mb-4">
                                <div class="input-group">
                                    <InputText id="password" class="form-control narrow-input" type="password" placeholder="Password" @bind-Value="@loginModel.Password" />
                                    <div class="input-group-append">
                                        <span class="input-group-text" style="background-color: transparent; border: none;">
                                            <!-- Font Awesome icon -->
                                            <i class="fa fa-lock fa-2x" style="border: none;"></i>
                                        </span>
                                    </div>
                                </div>
                                <ValidationMessage For="@(() => loginModel.Password)" />
                            </div>

                            <div class="d-flex justify-content-end">
                                <button type="submit" class="btn btn-login btn-block">Log in</button>
                            </div>

                        </EditForm>


                    </div>
                </div>

            </div>
        </div>
    </div>
</div>


<style>
    .card {
        max-width: 400px;
        margin: 0 auto;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .narrow-input {
        width: 50px;
    }
</style>


@code {
    private LoginModel loginModel = new LoginModel();

    private async Task HandleValidSubmit()
    {
        // Get the user data from SQL in UserService
        var userList = await UserService.GetUser(loginModel.Username);
        var user = userList.FirstOrDefault(); // Get the first user from the list (or null if the list is empty)

        if (user != null)
        {
            var passwordHasher = new PasswordHasher<User>();

            // Verify if the hashed password in the database matches the entered password from the user
            var passwordVerificationResult = passwordHasher.VerifyHashedPassword(user, user.password, loginModel.Password);

            if (passwordVerificationResult == PasswordVerificationResult.Success)
            {
                // Navigate to home page
                NavigationManager.NavigateTo("/home");
            }
            else
            {
                // Passwords do not match
                await JSRuntime.InvokeVoidAsync("alert", "User found, but wrong password entered.");
            }
        }
        else
        {
            // User not found
            await JSRuntime.InvokeVoidAsync("alert", "User not found. Try another username.");
        }
    }


    public class LoginModel
    {
        [Required]
        public string Username { get; set; }

        [Required]
        public string Password { get; set; }

        [Required]
        public bool RememberMe { get; set; }
    }
}
}


