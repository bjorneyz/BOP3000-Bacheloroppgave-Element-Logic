@page "/login"
@using LoginNamespace = Login;
@using System.Security.Claims;
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.WebUtilities;
@using WebStoreElementLogic.Data;
@using WebStoreElementLogic.Entities;
@using WebStoreElementLogic.Interfaces;
@using Microsoft.AspNetCore.Identity;
@inject IUserService UserService;
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager;
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Authentication.Cookies;
@using Microsoft.AspNetCore.Authentication;
@inject IJSRuntime JSRuntime;
@using Microsoft.AspNetCore.Components.Authorization;
@using WebStoreElementLogic.Account;
@using Microsoft.Extensions.Caching.Distributed
@inject IDistributedCache DistributedCache
@layout Shared.LoginLayout;
@inject Microsoft.AspNetCore.Identity.UserManager<IdentityUser> UserManager;
@inject CustomAuthenticationStateProvider AuthenticationStateProvider;
@inject ISimpleCookieManager SimpleCookieManager;

<title>Log in</title>

@if (PasswordWarning)
{
    <Toast>
        <strong>Could not log in:</strong>
        <br>Wrong password for user
    </Toast>
}
@if (UserWarning)
{
    <Toast>
        <strong>Could not log in:</strong>
        <br>No user with that username
    </Toast>
}

<div class="center">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6">

                <div class="card">
                    <div class="card-body">

                        <img src="../images/logos/Element Logic logo red hires.jpg" style="width: 300px; height: 100px;" class="mx-auto d-block mb-4" aria-label="Element Logic logo"/>

                        <h5 class="card-title text-center mb-4">Login to Web Store</h5>

                        <EditForm Model="@loginModel" OnValidSubmit="@HandleValidSubmit" aria-label="Login form">
                            <DataAnnotationsValidator />

                            <div class="form-group border mb-4">
                                <div class="input-container">
                                    <InputText id="username" class="narrow-input" autocomplete="off" placeholder="Username" @bind-Value="@loginModel.Username" />
                                    <!-- Font Awsome icon -->
                                    <i class="fa fa-user input-icon"></i>
                                </div>
                                <ValidationMessage For="@(() => loginModel.Username)" />
                            </div>

                            <div class="form-group border mb-4">
                                <div class="input-container">
                                    <InputText id="password" class="narrow-input" type="password" placeholder="Password" @bind-Value="@loginModel.Password" />
                                    <!-- Font Awsome icon -->
                                    <i class="fa fa-lock input-icon"></i>
                                </div>
                                <ValidationMessage For="@(() => loginModel.Password)" />
                            </div>

                            <div class="d-flex justify-content-end">
                                <button type="submit" class="btn btn-login btn-block" aria-label="Submit">Log in</button>
                            </div>

                        </EditForm>


                    </div>
                </div>

            </div>
        </div>
    </div>
</div>


<style>
    .card {
        max-width: 400px;
        margin: 0 auto;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .narrow-input {
        width: 50px;
    }
</style>


@code {
    private bool PasswordWarning = false;
    private bool UserWarning = false;

    private LoginModel loginModel = new LoginModel();

    private async Task HandleValidSubmit()
    {
        var user = await UserService.GetUser(loginModel.Username);

        if (user != null)
        {
            var passwordHasher = new PasswordHasher<User>();
            var passwordVerificationResult = passwordHasher.VerifyHashedPassword(user, user.password, loginModel.Password);

            if (passwordVerificationResult == PasswordVerificationResult.Success)
            {
                // Set the admin status of the user to the value retrieved from the database
                loginModel.IsAdmin = Convert.ToBoolean(user.admin);

                // Set session value
                await DistributedCache.SetStringAsync("IsAdmin", loginModel.IsAdmin.ToString());

                // Set the authenticated user information
                var claims = new List<Claim>
                {
                    new Claim(ClaimTypes.Name, user.userName),
                    new Claim(ClaimTypes.Role, loginModel.IsAdmin ? "Admin" : "User")
                };

                var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                var principal = new ClaimsPrincipal(identity);
                var authenticationState = new AuthenticationState(principal);

                // Sign in the user
                await AuthenticationStateProvider.NotifyAuthenticationStateChangedAsync(authenticationState);

                // Place authentication cookies
                await SimpleCookieManager.PlaceAuthCookie(user.userName, user.password);

                // Navigate to home page
                NavigationManager.NavigateTo("/home");
            }
            else
            {
                // Passwords do not match
                PasswordWarning = true;
                await Task.Delay(2500);
                PasswordWarning = false;
                StateHasChanged();

                return;
            }
        }
        else
        {
            // User not found
            UserWarning = true;
            await Task.Delay(2500);
            UserWarning = false;
            StateHasChanged();

            return;
        }
    }
}

