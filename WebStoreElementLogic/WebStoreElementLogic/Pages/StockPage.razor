@page "/stockpage"
@using Microsoft.AspNetCore.WebUtilities;
@using WebStoreElementLogic.Data;
@using WebStoreElementLogic.Entities;
@using WebStoreElementLogic.Interfaces;
@inject IProductService ProductService;
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inherits ProductComponentBase

<title>Stock</title>
<div class="d-flex flex-row mx-5 rounded mb-3">
    <button @onclick="() => ShowList = !ShowList" class="btn btn-custom">
        @if (ShowList)
        {
            <i class="fa fa-th"></i>
        }
        else
        {
            <i class="fa fa-list"></i>
        }
    </button>
    <input placeholder="Search Product Names.." id="txtSearch" name="search" type="text" class="form-control ms-3"
           @bind="SearchTerm" @bind:event="oninput">
</div>
<div class="container-fluid">
    <div class="@(ShowList ? "mx-5" : "row")">
        @foreach (Product product in FilteredProducts)
        {
            if (!ShowList)
            {
                <ProductTile Product="@product"
                     Index="@FilteredProducts.IndexOf(product)"
                     OnSelected="(index) => SelectProduct(FilteredProducts[index])"
                     Selected="@(SelectedIndex == FilteredProducts.IndexOf(product))" />
            }
            else
            {
                <ProductListItem Info="@product"
                         Index="@FilteredProducts.IndexOf(product)"
                         OnSelected="(index) => SelectProduct(FilteredProducts[index])"
                         Selected="@(SelectedIndex == FilteredProducts.IndexOf(product))" />
            }
        }
        @if (Products == null)
        {
            <h3>Loading Products...</h3>
        }
    </div>
</div>

@if (Showquant)
{
    <QuantityModal Product="@FilteredProducts[SelectedIndex]"
              Index="SelectedIndex"
              OnCancelEvent="() => Showquant = false" />
}


@code {

    public override void SelectProduct(Product product)
    {
        base.SelectProduct(product);
        Showquant = true;
    }

    private bool Showquant = false;
    private bool ShowList = false;
    private bool ShowSuccess = false;

    private int Count = 0;

    protected override async Task OnInitializedAsync()
    {

        // method for showing productname from database into page
        try
        {
            int pageSize = 25;
            // Get the current page number from the query string
            int pageIndex = GetPageIndexFromQueryString();

            // Store in a new list temporarily to avoid seting Products to null
            List<Product> FetchedProducts = await ProductService.GetProducts("", pageIndex, pageSize);
            FilteredProducts = FetchedProducts;
            Products = FilteredProducts.ToList();
        }
        catch (Exception e)
        {
            // NoConnection = true;
        }

    }
}