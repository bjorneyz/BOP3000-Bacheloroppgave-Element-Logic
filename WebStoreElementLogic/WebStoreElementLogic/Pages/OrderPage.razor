@page "/orderpage"
@attribute [Authorize]
@using Microsoft.AspNetCore.WebUtilities;
@using WebStoreElementLogic.Data;
@using WebStoreElementLogic.Entities;
@using WebStoreElementLogic.Interfaces;
@inject IProductService ProductService;
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inherits ProductComponentBase
<title>Order</title>
<Cart CartDict="CartDict" Products="Products">
    <div class="d-flex flex-row mx-5 rounded mb-3">
        <button @onclick="() => ShowList = !ShowList" class="btn btn-custom">
            @if (ShowList)
            {
                <i class="fa fa-th"></i>
            }
            else
            {
                <i class="fa fa-list"></i>
            }
        </button>
        <input placeholder="Search Product Names.." id="txtSearch" name="search" type="text" class="form-control ms-3" 
            @bind="SearchTerm" @bind:event="oninput">
    </div>
    <div class="container-fluid">
        <div class="row">
            @foreach (Product product in FilteredProducts)
            {
                if (!ShowList)
                {
                    <ProductTile 
                        Product="@product"
                        Index="@FilteredProducts.IndexOf(product)"
                        OnSelected="(index) => SelectProduct(FilteredProducts[index])" 
                        Selected="@(SelectedIndex == FilteredProducts.IndexOf(product))"  />
                }
                else
                {
                    <ProductListItem 
                        Info="@product"
                        Index="@FilteredProducts.IndexOf(product)"
                        OnSelected="(index) => SelectProduct(FilteredProducts[index])"
                        Selected="@(SelectedIndex == FilteredProducts.IndexOf(product))" />
                }
            }
            @if (Products == null)
            {
                <h3>Loading Products...</h3>
            }
        </div>
    </div>
</Cart>

@if(ShowModal)
{
    <ProductModal 
        Product="@FilteredProducts[SelectedIndex]" 
        Index="SelectedIndex" 
        OnCancelEvent="() =>ShowModal = false" 
        OnAddEvent="AddToCart"/>
}


@code {

    public override void SelectProduct(Product product)
    {
        base.SelectProduct(product);
        ShowModal = true;
    }

    private bool ShowModal = false;

    private bool ShowList = false;

    private List<Product> ProductsCopy = new List<Product>();

    [Parameter]
    public int id { get; set; }

    private Product newInfo = new Product();

    public Dictionary<Product, int> CartDict { get; set; } = new Dictionary<Product, int>();

    protected override async Task OnInitializedAsync()
    {

        // method for showing productname from database into page
        try
        {
            int pageSize = 25;
            // Get the current page number from the query string
            int pageIndex = GetPageIndexFromQueryString();

            // Store in a new list temporarily to avoid seting Products to null
            List<Product> FetchedProducts = await ProductService.GetProducts("", pageIndex, pageSize);
            FilteredProducts = FetchedProducts;
            Products = FilteredProducts.ToList();
            FilterProducts();
        }
        catch(Exception e)
        {
            // NoConnection = true;
        }

    }

    public override void FilterProducts()
    {
        SelectedIndex = -1;

        Console.WriteLine("FilterProducts called");
        endPage = 0;
        Console.WriteLine($"SearchTerm = {SearchTerm}");
        if (string.IsNullOrWhiteSpace(SearchTerm))
        {
            // If the search term is empty or null, show all products
            FilteredProducts = Products.Where(p =>p.Qty > 0).ToList();
        }
        else
        {
            // Otherwise, filter the products based on the search term
            FilteredProducts = Products.Where(p => 
                p.Name.IndexOf(SearchTerm, StringComparison.OrdinalIgnoreCase) >= 0 &&
                p.Qty > 0 // Do not include product if quantity is 0
            ).ToList();
        }
        Console.WriteLine($"FilteredProducts = {FilteredProducts.Count}");
    }

    private void AddToCart(int[] product)
    {
        ShowModal = false;

        int index = product[0];
        int amount = product[1];

        if(amount <= 0)
        {
            return;
        }

        if(CartDict.ContainsKey(FilteredProducts[index]))
        {
            CartDict[FilteredProducts[index]] = amount;
        }
        else
        {
            CartDict.Add(FilteredProducts[index], amount);
        }
    }
}