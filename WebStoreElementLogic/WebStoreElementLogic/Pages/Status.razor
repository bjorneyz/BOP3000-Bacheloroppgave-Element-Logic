@page "/Status"
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Components.Authorization
@using WebStoreElementLogic.Data
@using WebStoreElementLogic.Entities
@using WebStoreElementLogic.Interfaces
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IStatusService StatusService
@inject NavigationManager NavigationManager
@inherits ProductComponentBase

<title>Status</title>

<div class="d-flex flex-row mx-5 rounded mb-3">
    <!-- Inbound -->
    <div class="col container-fluid">
        <h3 style="text-align: center">Inbound</h3>
        @if (inbounds != null)
        {
            @foreach (Inbound inbound in inbounds)
            {
                <div class="row">
                    <div class="col">
                        <div class="d-flex justify-content-between align-items-center">
                            <p class="mt-3 col-3">@inbound.Name</p>
                            <p class="mt-3 col-1">Product ID: @inbound.ProductId</p>
                            <p class="mt-3 col-1">Quantity: @inbound.DisplayQuantity</p>
                            <p class="mt-3 col-1">Status: @(inbound.Status ? "Awaiting" : "Done")</p>
                            <button type="button" class="btn btn-danger" @onclick="() => ShowDeleteConfirmation(inbound.InboundId)">Delete</button>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <!-- Empty column for the gap -->
    <div class="col-1 d-flex align-items-center justify-content-center">
        <div style="border-right: 1px solid black; height: 100%;"></div>
    </div>

    <!-- Order -->
    <div class="col container-fluid">
        <h3 style="text-align: center">Order</h3>
        @if (orders != null)
        {
            @foreach (Order order in orders)
            {
                <div class="row">
                    <div class="col">
                        <div class="d-flex justify-content-between align-items-center">
                            <p class="mt-3 col-3">@order.Name</p>
                            <p class="mt-3 col-1">Product ID: @order.ExtProductId</p>
                            <p class="mt-3 col-1">Quantity: @order.DisplayQuantity</p>
                            <p class="mt-3 col-1">Status: @(order.Status ? "Awaiting" : "Done")</p>
                            <button type="button" class="btn btn-danger" @onclick="() => ShowDeleteConfirmation(order.ExtOrderId)">Delete</button>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@if (showDeleteConfirmation)
{
    <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="close" @onclick="DeleteCancelled">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this item?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" @onclick="DeleteConfirmed">Yes</button>
                    <button class="btn btn-secondary" @onclick="DeleteCancelled">No</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool showDeleteConfirmation;
    private int deletingItemId;
    private List<Inbound> inbounds;
    private List<Order> orders;

    private void ShowDeleteConfirmation(int itemId)
    {
        deletingItemId = itemId;
        showDeleteConfirmation = true;
    }

    private async Task DeleteConfirmed()
    {
        await DeleteInbound(deletingItemId);
        await DeleteOrder(deletingItemId);
        showDeleteConfirmation = false;
    }

    private void DeleteCancelled()
    {
        showDeleteConfirmation = false;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            inbounds = await StatusService.GetUnfinishedInbounds();
            orders = await StatusService.GetUnfinishedOrders();
        }
        catch (Exception e)
        {
            // Handle exception
        }
    }

    private async Task DeleteInbound(int inboundId)
    {
        try
        {
            // Call the service method to delete the inbound item
            int deletedRows = await StatusService.DeleteInbound(inboundId);

            if (deletedRows > 0)
            {
                inbounds = await StatusService.GetUnfinishedInbounds();
            }
            else
            {
                // Handle the case when the delete operation did not affect any rows
                // Display an error message or take appropriate action
            }
        }
        catch (Exception e)
        {
            // Handle exception
        }
    }

    private async Task DeleteOrder(int extorderId)
    {
        try
        {
            // Call the service method to delete the order
            int deletedRows = await StatusService.DeleteOrder(extorderId);

            if (deletedRows > 0)
            {
                orders = await StatusService.GetUnfinishedOrders();
            }
            else
            {
                // Handle the case when the delete operation did not affect any rows
                // Display an error message or take appropriate action
            }
        }
        catch (Exception e)
        {
            // Handle exception
        }
    }
}
