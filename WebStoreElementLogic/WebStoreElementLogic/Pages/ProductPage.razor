@page "/productpage"
@attribute [Authorize]
@using Microsoft.AspNetCore.WebUtilities;
@using WebStoreElementLogic.Data;
@using WebStoreElementLogic.Entities;
@using WebStoreElementLogic.Interfaces;
@using Microsoft.JSInterop
@inject IProductService ProductService;
@inject HttpClient HttpClient;
@inject IEManagerService EManagerService;
@inject ICustomWebHostEnvironment CustomWebHostEnvironment;
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inherits ProductComponentBase
<title>Product</title>

@if (StockWarning)
{
    <Toast>
        <strong>Could not delete product:</strong>
        <br>Stock remaning
    </Toast>
}
@if (OrderWarning)
{
    <Toast>
        <strong>Could not delete product:</strong>
        <br>Orders remaining for product
    </Toast>
}
@if (InboundWarning)
{
    <Toast>
        <strong>Could not delete product:</strong>
        <br>Inbounds remaining for product
    </Toast>
}

@if (Products == null)
{
    <!-- Loading the application -->
    <div id="app">
        <div style="position:absolute; top:30vh; width:100%; text-align:center">
            <h1>Web Store</h1>
            <div style="display:flex; gap:10px; justify-content:center; align-items:center">
                <div class="spinner-border" role="status"></div>
                Loading application..
            </div>
        </div>
    </div>
}
else
{
    @if (DeleteAlert)
    {
        <Alert OnCancel="CancelDelete">
            <h3>Delete Product</h3>
            Are you sure you wish to delete
            <span class="text-danger text-decoration-underline">@Products[SelectedIndex].Name?</span>
            <div class="d-flex flex-row justify-content-around mt-3">
                <button @onclick="CancelDelete" class="btn btn-neutral" title="Cancel" aria-label="Cancel">Cancel</button>
                <button @onclick="() => Delete(FilteredProducts[SelectedIndex].Id)" class="btn btn-warning" title="Delete" aria-label="Delete product">Delete </button>
            </div>
        </Alert>
    }

    <!-- Searching -->
    <div class="d-flex flex-row mx-5 rounded mb-3">
        <div class="container-fluid">
            <!-- Search function -->
            <div class="position-relative" style="padding-bottom: 30px;">
                <div class="input-container">
                    <input type="text" class="form-control" placeholder="Search.." id="txtSearch" name="search" autocomplete="off" title="Search Product Names" aria-label="Search bar" @bind="SearchTerm" @bind:event="oninput">
                    <div class="input-group-append">
                        <span class="input-group-text bg-transparent border-0"><i class="fa fa-search fa-lg" aria-label="Search icon"></i></span>
                    </div>
                </div>
                <div class="btn-add-container mt-3">
                    <button class="btn btn-positive my-custom-font" title="Add Product" aria-label="Add product" @onclick="() => New(selectedFile, newInfo)">
                        <div class="position-relative">
                            Add Product
                        </div>
                    </button>
                </div>
            </div>

            <div style="max-height: calc(100vh - 300px); overflow-y: scroll" class="px-2">
            @if (FilteredProducts != null)
            {
                @foreach (Product product in FilteredProducts)
                {
                    <ProductListItem
                        Info="@product"
                        Index="@FilteredProducts.IndexOf(product)"
                        OnSelected="(index) => SelectProduct(FilteredProducts[index])"
                        Selected="@(SelectedIndex == FilteredProducts.IndexOf(product))" />
                }
            }
            </div>
        </div>   
        <div class="container-fluid">
            <!-- TODO: better solution -->
            @if (Products != null)
            {
                
            }
            <div class="container-fluid pe-4">
                @if (SelectedIndex >= 0)
                {
                    <ProductForm 
                        Title="Edit Product"
                        SaveLabel="Save changes"
                        DeleteButton
                        Info="FilteredProducts[SelectedIndex]"
                        Copy="(Product) FilteredProducts[SelectedIndex].Clone()"
                        OnSave="SaveHandler"
                        OnDelete="DeleteHandler" />
                }
                @if (AddNew)
                {
                    <ProductForm 
                        Title="Add Product"
                         SaveLabel="Add"
                         Info="newInfo"
                         Copy="(Product) newInfo.Clone()"
                         OnSave="SaveHandler"
                         OnDiscard="Discard" />
                }
            </div>
        </div>
    </div> 
}

@code {

    [Parameter]
    public int id { get; set; }

    private Product newInfo = new Product();

    private bool AddNew = false;
    private bool DeleteAlert = false;
    private bool NoConnection = false;

    // Alerts for deleting items
    private bool StockWarning = false;
    private bool OrderWarning = false;
    private bool InboundWarning = false;

    // Image
    private IBrowserFile selectedFile;

    private string _imagePath;

    [Parameter]
    public EventCallback OnImageSelected { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            newInfo = await ProductService.GetByID(id);
            // Set the page size to 25 products per page
            int pageSize = 25;
            // Get the current page number from the query string
            int pageIndex = GetPageIndexFromQueryString();
            // Store in a new list temporarily to avoid setting Products to null
            List<Product> FetchedProducts = await ProductService.GetProducts(searchTerm, pageIndex, pageSize);
            FilteredProducts = FetchedProducts;
            Products = FilteredProducts.ToList();

        }
        catch (Exception e)
        {
            NoConnection = true;
        }
    }

    public override void SelectProduct(Product product)
    {
        AddNew = false;
        base.SelectProduct(product);
    }

    // Changed due to the search- function
    private async Task SaveHandler(Product product)
    {
        if (AddNew)
        {
            bool success = await EManagerService.ProductInformation(product);

            if(!success)
            {
                // Do something
                Console.WriteLine("Could not upload to EManager");
            }
            else
            {
                Console.WriteLine("Success uploading");
            }

            // Add product to db and array
            await ProductService.Create(product);
            Products.Add(product);

            AddNew = false;
        }
        else
        {
            await ProductService.Update(product);
        }

        // Manually trigger filter
        FilterProducts();

        // If our currently filtered products don't show the new product, reset the filter
        if (!FilteredProducts.Contains(product))
        {
            searchTerm = "";
            FilterProducts();
        }

        // Have the newest product be the selected product
        SelectedIndex = FilteredProducts.IndexOf(product);
    }

    private async void DeleteHandler()
    {
        if(await ProductService.hasStock(FilteredProducts[SelectedIndex].Id))
        {
            StockWarning = true;
            await Task.Delay(2500);
            StockWarning = false;
            StateHasChanged();

            return;
        }

        if (await ProductService.doesExistInOrder(FilteredProducts[SelectedIndex].Id))
        {
            OrderWarning = true;
            await Task.Delay(2500);
            OrderWarning = false;
            StateHasChanged();

            return;
        }

        if (await ProductService.doesExistInInbound(FilteredProducts[SelectedIndex].Id))
        {
            InboundWarning = true;
            await Task.Delay(2500);
            InboundWarning = false;
            StateHasChanged();

            return;
        }

        DeleteAlert = true;
    }

    private void CancelDelete()
    {
        DeleteAlert = false;
    }

    protected async Task Delete(int id)
    {
        

        await ProductService.Delete(id);

        DeleteAlert = false;

        if (SelectedIndex >= 0)
        {
            Products.RemoveAt(SelectedIndex);
            SelectedIndex = -1;
        }
    }

    private async Task New(IBrowserFile file, Product product)
    {
        int? newId = await ProductService.GetNextID();
        newInfo = new Product { Id = Math.Max(newId ?? 1, 1) };
        SelectedIndex = FilteredProducts.IndexOf(newInfo);
        AddNew = true;

        NavigationManager.NavigateTo("/productpage");

        StateHasChanged();
    }

    private void Discard()
    {
        AddNew = false;
        StateHasChanged();
    }

}

