@page "/productpage"
@using Microsoft.AspNetCore.WebUtilities;
@using WebStoreElementLogic.Data;
@using WebStoreElementLogic.Entities;
@using WebStoreElementLogic.Interfaces;
@inject IProductService ProductService;
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inherits ProductComponentBase
<title>Product</title>
@if (Products == null)
{
    <!-- Loading the application -->
    <div id="app">
        <div style="position:absolute; top:30vh; width:100%; text-align:center">
            <h1>Web Store</h1>
            <div style="display:flex; gap:10px; justify-content:center; align-items:center">
                <div class="spinner-border" role="status"></div>
                No data to show...
            </div>
        </div>
    </div>
}
else
{
    


    @if (DeleteAlert)
    {
        <Alert OnCancel="CancelDelete">
            <h3>Delete Product</h3>
            Are you sure you wish to delete 
            <span class="text-danger text-decoration-underline">@Products[SelectedIndex].Name?</span>
            <div class="d-flex flex-row justify-content-around mt-3">
                <button @onclick="CancelDelete" class="btn btn-neutral">Cancel</button>
            <button @onclick="() => Delete(Products[SelectedIndex].Id)" class="btn btn-warning">Delete </button>
            </div>
        </Alert>
    }

    <!-- Test for searching -->
    <div class="d-flex justify-content-between">
        <div class="container-fluid">
            <!-- Search function -->
            <div class="sticky-top top-0 py-3 bg-white">
                <input type="text" id="txtSearch" class="form-control" autocomplete="off" placeholder="Search Product Names.." @bind="SearchTerm" @bind:event="oninput" />
            </div>
            @if (FilteredProducts != null)
            {
                @foreach (Product product in FilteredProducts)
                {
                    <ProductListItem
                        Info="@product"
                        Index="@FilteredProducts.IndexOf(product)"
                        OnSelected="(index) => SelectProduct(FilteredProducts[index])"
                        Selected="@(SelectedIndex == FilteredProducts.IndexOf(product))" />
                }
            }
        </div>
    
        <div class="container-fluid">

            <!-- TODO: better solution -->
            @if (Products != null)
            {
                <button class="btn btn-positive mt-2 bottom-0 mb-4 rounded-pill position-fixed align-self-end d-block"
                        style="z-index: 3; transform: translateX(-5vw);"
                @onclick="New">
                    <h3>Add Product</h3>
                </button>
            }

            <div class="container-fluid position-fixed w-50 pe-4">
                @if (SelectedIndex >= 0)
                {
                    <ProductForm 
                        Title="Edit product"
                        SaveLabel="Save changes"
                        DiscardLabel="Discard changes"
                        DeleteButton
                        Info="FilteredProducts[SelectedIndex]"
                        Copy="(Product) FilteredProducts[SelectedIndex].Clone()"
                        OnSave="SaveHandler"
                        OnDelete="DeleteHandler" />


                }
                @if (AddNew)
                {
                    <ProductForm 
                        Title="Add new product"
                         SaveLabel="Add"
                         DiscardLabel="Cancel"
                         Info="newInfo"
                         Copy="(Product) newInfo.Clone()"
                         OnSave="SaveHandler"
                         OnDiscard="Discard" />
                }

            </div>
        </div>
    </div>

}

@code {

    [Parameter]
    public int id { get; set; }

    private Product newInfo = new Product();

    private bool AddNew = false;
    private bool DeleteAlert = false;
    private bool NoConnection = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            newInfo = await ProductService.GetByID(id);
            // Set the page size to 25 products per page
            int pageSize = 25;
            // Get the current page number from the query string
            int pageIndex = GetPageIndexFromQueryString();
            // Store in a new list temporarily to avoid setting Products to null
            List<Product> FetchedProducts = await ProductService.GetProducts(searchTerm, pageIndex, pageSize);
            FilteredProducts = FetchedProducts;
            Products = FilteredProducts.ToList();
        }
        catch (Exception e)
        {
            NoConnection = true;
        }
    }

    public override void SelectProduct(Product product)
    {
        AddNew = false;
        base.SelectProduct(product);
    }

    // Changed due to the search- function
    private async Task SaveHandler(Product product)
    {
        if (AddNew)
        {
            // Add product to db and array
            await ProductService.Create(product);
            Products.Add(product);

            AddNew = false;
        }
        else
        {
            await ProductService.Update(product);
        }

        // Manually trigger filter
        FilterProducts();

        // If our currently filtered products don't show the new product, reset the filter
        if (!FilteredProducts.Contains(product))
        {
            searchTerm = "";
            FilterProducts();
        }

        // Have the newest product be the selected product
        SelectedIndex = FilteredProducts.IndexOf(product);
    }

    private void DeleteHandler()
    {
        DeleteAlert = true;
    }

    private void CancelDelete()
    {
        DeleteAlert = false;
    }

    protected async Task Delete(int id)
    {
        await ProductService.Delete(id);

        DeleteAlert = false;

        if (SelectedIndex >= 0)
        {
            Products.RemoveAt(SelectedIndex);
            SelectedIndex = -1;
        }
    }

    private async Task New()
    {
        var productsList = await ProductService.GetNextID(0);
        // Checks if the Id is null
        int newId = productsList?.FirstOrDefault()?.Id ?? 0;
        newInfo = new Product { Id = newId };
        SelectedIndex = FilteredProducts.IndexOf(newInfo);
        AddNew = true;

        NavigationManager.NavigateTo("/productpage");

        StateHasChanged();
    }

    private void Discard()
    {
        AddNew = false;
        StateHasChanged();
    }

}

